let homeworkAttempts = {};

function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üßÆ Math XP')
    .addSubMenu(ui.createMenu('‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤ –∫–ª–∞—Å—ñ')
      .addItem('+5 XP: –ü—Ä–æ—Å—Ç–µ', 'classSimple')
      .addItem('+10 XP: –°–µ—Ä–µ–¥–Ω—î', 'classMedium')
      .addItem('+15 XP: –°–∫–ª–∞–¥–Ω–µ', 'classHard')
    )
    .addSubMenu(ui.createMenu('üè† –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è')
      .addItem('+10 XP: –ü—Ä–æ—Å—Ç–µ ‚Äî –æ–¥—Ä–∞–∑—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ', 'homeworkSimpleCorrect')
      .addItem('+20 XP: –°–µ—Ä–µ–¥–Ω—î ‚Äî –æ–¥—Ä–∞–∑—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ', 'homeworkMediumCorrect')
      .addItem('+30 XP: –°–∫–ª–∞–¥–Ω–µ ‚Äî –æ–¥—Ä–∞–∑—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ', 'homeworkHardCorrect')
      .addSeparator()
      .addItem('+1 XP: –°–ø—Ä–æ–±–∞', 'homeworkAttempt')
      .addItem('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –ü—Ä–æ—Å—Ç–µ ‚Äî –≤–∫–∞–∑–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±', 'homeworkSimpleFinal')
      .addItem('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –°–µ—Ä–µ–¥–Ω—î ‚Äî –≤–∫–∞–∑–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±', 'homeworkMediumFinal')
      .addItem('‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: –°–∫–ª–∞–¥–Ω–µ ‚Äî –≤–∫–∞–∑–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±', 'homeworkHardFinal')
    )
    .addSubMenu(ui.createMenu('‚ú® –ë–æ–Ω—É—Å–∏')
      .addItem('+10 XP: –°–∞–º–æ—Å—Ç—ñ–π–Ω–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞', 'bonusSelfFix')
      .addItem('+5 XP: –ì–∞—Ä–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è', 'bonusExplain')
      .addItem('+15 XP: –¢–≤–æ—Ä—á–∏–π –ø—ñ–¥—Ö—ñ–¥ / –Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞', 'bonusCreative')
    )
    .addToUi();
}

// === –ó–∞–ø–∏—Å XP ===
function addXP(type, points) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Data');
  sheet.appendRow([new Date(), type, points]);
  checkAchievements(); // Check achievements after XP is added
  checkQuests();
}

// === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—á—ñ–≤–æ–∫ ===
function checkAchievements() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const dataSheet = ss.getSheetByName('Data');
  const achSheet = ss.getSheetByName('Achievements_Log') || ss.insertSheet('Achievements_Log');
  
  achSheet.hideSheet();
  
  const data = dataSheet.getDataRange().getValues().slice(1); // exclude headers
  
  checkSprint(data, achSheet);
  checkAccuracy(data, achSheet);
  checkPersistence(data, achSheet);
  checkSelfTeacher(data, achSheet);
  checkExplanationMaster(data, achSheet);
  checkCreativity(data, achSheet);

  renderDashboard();
}

// === –ó–∞–ø–∏—Å –∞—á—ñ–≤–æ–∫ ===
function addAchievementIfNotExists(name, dateStr, level, achSheet) {
  const records = achSheet.getDataRange().getValues();
  const alreadyLogged = records.some(row => row[0] === dateStr && row[1] === name && row[2] === level);
  if (alreadyLogged) return;

  let xp=0;
  if(level>0){
    xp = 10+level*10;
    achSheet.appendRow([dateStr, name, level, true]);
    const dataSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Data');
    dataSheet.appendRow([new Date(), `–ê—á—ñ–≤–∫–∞: ${name} (—Ä—ñ–≤–µ–Ω—å ${level})`, xp]);
  }

}

// === –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –∞—á—ñ–≤–æ–∫ ===
function getAchievementsList() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const achSheet = ss.getSheetByName('Achievements_Log');
  if (!achSheet) return [];

  const data = achSheet.getDataRange().getValues().slice(1); // exclude headers if any
  // Map to "Name (Level X)"
  return data.map(row => `${row[1]} (Level ${row[2]})`);
}


function renderDashboard() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let dashboard = ss.getSheetByName('Dashboard');
  if (!dashboard) {
    dashboard = ss.insertSheet('Dashboard');
  }
  const achievements = getAchievementsList();

  dashboard.getRange('A6').setValue('üèÜ–ê—á—ñ–≤–∫–∏:');
  if (achievements.length === 0) {
    dashboard.getRange('B6').setValue('–ù–µ–º–∞—î –∞—á—ñ–≤–æ–∫');
  } else {
    dashboard.getRange(6, 2, achievements.length).setValues(achievements.map(a => [a]));
  }

  // Optional: adjust column width for better appearance
  dashboard.autoResizeColumn(1);
  dashboard.autoResizeColumn(2);
}

// === –ú–µ—Ö–∞–Ω—ñ–∫–∞ –º–∞–≥–∞–∑–∏–Ω—É ===
function buySelectedItems() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Shop");
  const range = sheet.getActiveRange();
  const row = range.getRow();
  const col = range.getColumn();

  // Only allow selection in columns B (2), C (3), or D (4) and from row 2 down
  if (row < 2 || col < 2 || col > 4) {
    SpreadsheetApp.getUi().alert("–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—Ç–∏–Ω–∫—É –≤ –∫–æ–ª–æ–Ω—Ü—ñ B, C –∞–±–æ D (–∑ —Ä—è–¥–∫–∞ 2 —ñ –Ω–∏–∂—á–µ).");
    return;
  }

  const itemCell = sheet.getRange(row, 2); // Column B
  const itemName = itemCell.getValue();

  // Update column E
  const eCell = sheet.getRange(row, 5); // Column E
  const currentValue = eCell.getValue();
  const newValue = isNaN(currentValue) || currentValue === "" ? 1 : Number(currentValue) + 1;
  eCell.setValue(newValue);

  // Apply strikethrough formatting to column B cell
  itemCell.setFontLine("line-through");

  // Show confirmation message
  SpreadsheetApp.getUi().alert(`–ü—Ä–µ–¥–º–µ—Ç "${itemName}" –∫—É–ø–ª–µ–Ω–æ, –¥–æ–±–∞–≤—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –Ω–∞ Dashboard`);

  SpreadsheetApp.flush();
}





// === –ó–∞–≤–¥–∞–Ω–Ω—è –≤ –∫–ª–∞—Å—ñ ===
function classSimple() { addXP("–ö–ª–∞—Å: –ü—Ä–æ—Å—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è", 5); }
function classMedium() { addXP("–ö–ª–∞—Å: –°–µ—Ä–µ–¥–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è", 10); }
function classHard()   { addXP("–ö–ª–∞—Å: –°–∫–ª–∞–¥–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è", 15); }

// === –î–æ–º–∞—à–Ω—ñ ‚Äî –æ–¥—Ä–∞–∑—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ ===
function homeworkSimpleCorrect() { addXP("–î–ó: –ü—Ä–æ—Å—Ç–µ –æ–¥—Ä–∞–∑—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ", 10); }
function homeworkMediumCorrect() { addXP("–î–ó: –°–µ—Ä–µ–¥–Ω—î –æ–¥—Ä–∞–∑—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ", 20); }
function homeworkHardCorrect()   { addXP("–î–ó: –°–∫–ª–∞–¥–Ω–µ –æ–¥—Ä–∞–∑—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ", 30); }

// === –î–æ–º–∞—à–Ω—ñ ‚Äî —Å–ø—Ä–æ–±–∏ ===
function homeworkAttempt() {
  const taskId = getTaskId();
  if (!homeworkAttempts[taskId]) homeworkAttempts[taskId] = 1;
  else homeworkAttempts[taskId]++;
  addXP("–î–ó: —Å–ø—Ä–æ–±–∞ –∑ –ø–æ–º–∏–ª–∫–æ—é", 1);
}

// === –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –î–ó –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–ø—Ä–æ–± ===
function homeworkSimpleFinal()   { finalizeHomework("–ü—Ä–æ—Å—Ç–µ", 10); }
function homeworkMediumFinal()   { finalizeHomework("–°–µ—Ä–µ–¥–Ω—î", 20); }
function homeworkHardFinal()     { finalizeHomework("–°–∫–ª–∞–¥–Ω–µ", 30); }

function finalizeHomework(level, baseXP) {
  const ui = SpreadsheetApp.getUi();
  const taskId = getTaskId();

  const response = ui.prompt(`–°–∫—ñ–ª—å–∫–∏ –±—É–ª–æ –≤—Å—å–æ–≥–æ —Å–ø—Ä–æ–± —É –∑–∞–¥–∞—á—ñ (${level})?`, ui.ButtonSet.OK_CANCEL);
  if (response.getSelectedButton() !== ui.Button.OK) return;

  const attempts = parseInt(response.getResponseText());
  if (isNaN(attempts) || attempts < 1) {
    ui.alert("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ —Å–ø—Ä–æ–±.");
    return;
  }

  const bonusXP = Math.max(baseXP - attempts, 1);
  addXP(`–î–ó: ${level} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ ${attempts} —Å–ø—Ä–æ–±–∞–º–∏`, bonusXP);
}

// === –ë–æ–Ω—É—Å–∏ ===
function bonusSelfFix()   { addXP("–ë–æ–Ω—É—Å: –°–∞–º–æ—Å—Ç—ñ–π–Ω–æ –∑–Ω–∞–π—à–æ–≤ –ø–æ–º–∏–ª–∫—É", 10); }
function bonusExplain()   { addXP("–ë–æ–Ω—É—Å: –ì–∞—Ä–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è", 5); }
function bonusCreative()  { addXP("–ë–æ–Ω—É—Å: –¢–≤–æ—Ä—á–∏–π –ø—ñ–¥—Ö—ñ–¥ / –Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞", 15); }

// === –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ID –∑–∞–≤–¥–∞–Ω–Ω—è ===
function getTaskId() {
  // –°—Ç–≤–æ—Ä—é—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ –¥–∞—Ç—ñ (–º–æ–∂–Ω–∞ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏)
  const now = new Date();
  return now.toISOString().slice(0, 10) + '-' + now.getHours();
}

// === –ê—á—ñ–≤–∫–∏ ===
function checkSprint(data, achSheet) {
  const today = new Date().toDateString();
  const classTasksToday = data.filter(row => {
    const date = new Date(row[0]).toDateString();
    const type = row[1];
    return date === today && type.includes("–ö–ª–∞—Å");
  });

  const count = classTasksToday.length;

  let level = 0;
  level = Math.floor(count / 5);
  if (level > 0) addAchievementIfNotExists("üèÉ–°–ø—Ä—ñ–Ω—Ç", today, level, achSheet);
}

// –¢–æ—á–Ω—ñ—Å—Ç—å ‚Äì –Ω–µ –º–µ–Ω—à–µ 2 –∑–∞–¥–∞—á —ñ–∑ –¥–∑ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å –±–µ–∑ –ø–æ–º–∏–ª–æ–∫
function checkAccuracy(data, achSheet) {
  const today = new Date().toDateString();
  // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –¥–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—é —Å–ø—Ä–æ–± (–ø–æ–º–∏–ª–æ–∫)
  // –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ "–æ–¥—Ä–∞–∑—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ" –≤ –æ–ø–∏—Å—ñ ‚Äî –Ω–µ–º–∞—î —Å–ø—Ä–æ–±
  const correctHomeworksToday = data.filter(row => {
    const date = new Date(row[0]).toDateString();
    const type = row[1];
    return date === today && type.includes("–î–ó") && !type.includes("—Å–ø—Ä–æ–±–∞") && type.includes("–æ–¥—Ä–∞–∑—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ");
  });

  const count = correctHomeworksToday.length;
  let level = Math.floor(count / 2);
  addAchievementIfNotExists("üéØ–¢–æ—á–Ω—ñ—Å—Ç—å", today, level, achSheet);
  
}

// –ù–∞–ø–æ–ª–µ–≥–ª–∏–≤—ñ—Å—Ç—å ‚Äì –Ω–µ –º–µ–Ω—à–µ 2 —Å–ø—Ä–æ–± –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –≤ –¥–∑ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
function checkPersistence(data, achSheet) {
  const today = new Date().toDateString();
  // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä—è–¥–∫–∏ –∑ —Ç–∏–ø–æ–º "–î–ó: —Å–ø—Ä–æ–±–∞ –∑ –ø–æ–º–∏–ª–∫–æ—é"
  const attemptsToday = data.filter(row => {
    const date = new Date(row[0]).toDateString();
    const type = row[1];
    return date === today && type.includes("—Å–ø—Ä–æ–±–∞");
  });


  const count = attemptsToday.length;
  let level = Math.floor(count / 2);
  addAchievementIfNotExists("üßó–ù–∞–ø–æ–ª–µ–≥–ª–∏–≤—ñ—Å—Ç—å", today, level, achSheet);

}

// –°–∞–º —Å–æ–±—ñ –≤—á–∏—Ç–µ–ª—å ‚Äì 3 —Ä–∞–∑—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–æ –±–æ–Ω—É—Å ¬´–°–∞–º–æ—Å—Ç—ñ–π–Ω–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞¬ª (—Å—É–∫—É–ø–Ω–æ)
function checkSelfTeacher(data, achSheet) {
  // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –±–æ–Ω—É—Å—ñ–≤ —É –≤—Å—ñ—Ö –∑–∞–ø–∏—Å–∞—Ö
  const count = data.filter(row => row[1] === "–ë–æ–Ω—É—Å: –°–∞–º–æ—Å—Ç—ñ–π–Ω–æ –∑–Ω–∞–π—à–æ–≤ –ø–æ–º–∏–ª–∫—É").length;
  let level = Math.floor(count / 3);
  addAchievementIfNotExists("üéì–°–∞–º —Å–æ–±—ñ –≤—á–∏—Ç–µ–ª—å", "–≤—Å—å–æ–≥–æ", level, achSheet);

}

// –ú–∞–π—Å—Ç–µ—Ä –ø–æ—è—Å–Ω–µ–Ω—å ‚Äì 3 —Ä–∞–∑—ñ–≤ –±–æ–Ω—É—Å ¬´–ì–∞—Ä–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è¬ª
function checkExplanationMaster(data, achSheet) {
  const count = data.filter(row => row[1] === "–ë–æ–Ω—É—Å: –ì–∞—Ä–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è").length;

  let level = Math.floor(count / 3);
  addAchievementIfNotExists("üí°–ú–∞–π—Å—Ç–µ—Ä –ø–æ—è—Å–Ω–µ–Ω—å", "–≤—Å—å–æ–≥–æ", level, achSheet);
}

// –ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å ‚Äì 3 —Ä–∞–∑—ñ–≤ –±–æ–Ω—É—Å ¬´–¢–≤–æ—Ä—á–∏–π –ø—ñ–¥—Ö—ñ–¥ / –Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞¬ª
function checkCreativity(data, achSheet) {
  const count = data.filter(row => row[1] === "–ë–æ–Ω—É—Å: –¢–≤–æ—Ä—á–∏–π –ø—ñ–¥—Ö—ñ–¥ / –Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞").length;
  let level = Math.floor(count / 3);
  addAchievementIfNotExists("üé®–ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å", "–≤—Å—å–æ–≥–æ", level, achSheet);
}


// === –ì–æ–ª–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–≤–µ—Å—Ç—ñ–≤ ===
function checkQuests() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const achSheet = ss.getSheetByName('Achievements_Log');
  if (!achSheet) return;
  
  const data = achSheet.getDataRange().getValues().slice(1) // skip headers
    .filter(r => Number(r[2]) > 0); // —Ç—ñ–ª—å–∫–∏ –∞—á—ñ–≤–∫–∏ –∑ —Ä—ñ–≤–Ω–µ–º > 0

  // —Å–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç—ñ–≤
  const quests = [
    {name: "üÉè –ö–æ–ª–µ–∫—Ü—ñ–æ–Ω–µ—Ä üÉè", checkFn: () => isQuestCompleted_Collector(data)},
    {name: "üèÉ‚Äç‚ôÇÔ∏è –ú–∞—Ä–∞—Ñ–æ–Ω üèÉ‚Äç‚ôÇÔ∏è", checkFn: () => isQuestCompleted_Marathon(data)},
    {name: "üå± –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è üå±", checkFn: () => isQuestCompleted_Growth(data)},
    {name: "üß≠ –î–æ—Å–ª—ñ–¥–Ω–∏–∫ üß≠", checkFn: () => isQuestCompleted_Explorer(data)},
    {name: "‚ö° –†–∏–≤–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ ‚ö°", checkFn: () => isQuestCompleted_Burst(data)},
    {name: "üé® –ú–∞–π—Å—Ç–µ—Ä –∫–æ–ª–µ–∫—Ü—ñ–π üé®", checkFn: () => isQuestCompleted_Collections(data)},
    {name: "‚öñÔ∏è –ë–∞–ª–∞–Ω—Å ‚öñÔ∏è", checkFn: () => isQuestCompleted_Balance(data)},
    {name: "üöÄ –ü—Ä–æ—Ä–∏–≤ üöÄ", checkFn: () => isQuestCompleted_Breakthrough(data)},
    {name: "üéØ –ü–µ—Ä—Ñ–µ–∫—Ü—ñ–æ–Ω—ñ—Å—Ç üéØ", checkFn: () => isQuestCompleted_Perfectionist(data)},
    {name: "üìö –í—á–∏—Ç–µ–ª—å-–Ω–∞—Ç—Ö–Ω–µ–Ω–Ω–∏–∫ üìö", checkFn: () => isQuestCompleted_Teacher(data)},
    {name: "üèÜ –ú–∞–π—Å—Ç–µ—Ä –∫–≤–µ—Å—Ç—ñ–≤ üèÜ", checkFn: () => isQuestCompleted_QuestMaster()}
  ];

  let questSheet = ss.getSheetByName('Quests_Log');
  if (!questSheet) {
    questSheet = ss.insertSheet('Quests_Log');
  }
  questSheet.hideSheet();

  quests.forEach(q => {
    if (q.checkFn()) {
      addQuestIfNotExists(q.name);
    }
  });
}

// === –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–≤–µ—Å—Ç–∞ ===
function addQuestIfNotExists(name) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let questSheet = ss.getSheetByName('Quests_Log');
  if (!questSheet) {
    questSheet = ss.insertSheet('Quests_Log');
  }
  questSheet.hideSheet();

  const records = questSheet.getDataRange().getValues();
  const already = records.some(r => r[0] === name);
  if (already) return;

  questSheet.appendRow([name, new Date(), true]);

  // –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞ Dashboard
  let dash = ss.getSheetByName('Dashboard');
  if (!dash) dash = ss.insertSheet('Dashboard');

  let row = 6;
  while (dash.getRange(row, 4).getValue() !== "") row++;
  dash.getRange(row, 4).setValue(name);
}


// === –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ===
function groupByDate(data) {
  const map = {};
  data.forEach(r => {
    const date = r[0];
    const name = r[1];
    const level = r[2];
    if (!map[date]) map[date] = [];
    map[date].push({name, level});
  });
  return map;
}

// === –õ–æ–≥—ñ–∫–∞ –∫–≤–µ—Å—Ç—ñ–≤ ===

// –ö–æ–ª–µ–∫—Ü—ñ–æ–Ω–µ—Ä: –∑—ñ–±—Ä–∞—Ç–∏ –∫–æ–∂–Ω—É –∞—á—ñ–≤–∫—É —Ö–æ—á–∞ –± 1 —Ä—ñ–≤–Ω—è
function isQuestCompleted_Collector(data) {
  const needed = ["üéØ–¢–æ—á–Ω—ñ—Å—Ç—å", "üßó–ù–∞–ø–æ–ª–µ–≥–ª–∏–≤—ñ—Å—Ç—å", "üèÉ–°–ø—Ä—ñ–Ω—Ç", "üéì–°–∞–º —Å–æ–±—ñ –≤—á–∏—Ç–µ–ª—å", "üí°–ú–∞–π—Å—Ç–µ—Ä –ø–æ—è—Å–Ω–µ–Ω—å", "üé®–ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å"];
  return needed.every(n => data.some(r => r[1] === n && Number(r[2]) >= 1));
}

// –ú–∞—Ä–∞—Ñ–æ–Ω: 8 —Ä–∞–∑—ñ–≤ –æ—Ç—Ä–∏–º–∞—Ç–∏ –°–ø—Ä—ñ–Ω—Ç ‚â•1
function isQuestCompleted_Marathon(data) {
  const sprints = data.filter(r => r[1] === "üèÉ–°–ø—Ä—ñ–Ω—Ç" && Number(r[2]) >= 1);
  return sprints.length >= 8;
}

// –ó—Ä–æ—Å—Ç–∞–Ω–Ω—è: 3 —Ä—ñ–∑–Ω—ñ –∞—á—ñ–≤–∫–∏ –∑ —Ä—ñ–≤–Ω–µ–º ‚â•3
function isQuestCompleted_Growth(data) {
  const unique = new Set(data.filter(r => Number(r[2]) >= 3).map(r => r[1]));
  return unique.size >= 3;
}

// –î–æ—Å–ª—ñ–¥–Ω–∏–∫: 3 —Ä—ñ–∑–Ω—ñ –∞—á—ñ–≤–∫–∏ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
function isQuestCompleted_Explorer(data) {
  const byDate = groupByDate(data.filter(r => /\d/.test(r[0])));
  return Object.values(byDate).some(list => {
    const uniq = new Set(list.map(r => r.name));
    return uniq.size >= 3;
  });
}

// –í–∏–±—É—Ö –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: 5 —Ä—ñ–∑–Ω—ñ –∞—á—ñ–≤–∫–∏ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
function isQuestCompleted_Burst(data) {
  const byDate = groupByDate(data.filter(r => /\d/.test(r[0])));
  return Object.values(byDate).some(list => {
    const uniq = new Set(list.map(r => r.name));
    return uniq.size >= 5;
  });
}



// –ú–∞–π—Å—Ç–µ—Ä –∫–æ–ª–µ–∫—Ü—ñ–π: —Ç—Ä–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∞—á—ñ–≤–∫–∏ ‚â•2
function isQuestCompleted_Collections(data) {
  const needed = ["üéì–°–∞–º —Å–æ–±—ñ –≤—á–∏—Ç–µ–ª—å", "üí°–ú–∞–π—Å—Ç–µ—Ä –ø–æ—è—Å–Ω–µ–Ω—å", "üé®–ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å"];
  return needed.every(n => data.some(r => r[1] === n && Number(r[2]) >= 2));
}

// –ë–∞–ª–∞–Ω—Å: –¢–æ—á–Ω—ñ—Å—Ç—å, –ù–∞–ø–æ–ª–µ–≥–ª–∏–≤—ñ—Å—Ç—å, –°–ø—Ä—ñ–Ω—Ç ‚â•1 –ø—Ä–æ—Ç—è–≥–æ–º 1 —Ç–∏–∂–Ω—è
function isQuestCompleted_Balance(data) {
  const byDate = groupByDate(data);
  const dates = Object.keys(byDate);
  for (let d of dates) {
    const day = new Date(d);
    const weekEnd = new Date(day);
    weekEnd.setDate(weekEnd.getDate() + 6);

    const inWeek = data.filter(r => {
      const t = new Date(r[0]);
      return t >= day && t <= weekEnd;
    }).map(r => r[1]);

    if (["üéØ–¢–æ—á–Ω—ñ—Å—Ç—å", "üßó–ù–∞–ø–æ–ª–µ–≥–ª–∏–≤—ñ—Å—Ç—å", "üèÉ–°–ø—Ä—ñ–Ω—Ç"].every(n => inWeek.includes(n))) {
      return true;
    }
  }
  return false;
}

// –ü—Ä–æ—Ä–∏–≤: –±—É–¥—å-—è–∫–∞ –∞—á—ñ–≤–∫–∞ —Ä—ñ–≤–µ–Ω—å ‚â•5
function isQuestCompleted_Breakthrough(data) {
  return data.some(r => Number(r[2]) >= 5);
}

// –ü–µ—Ä—Ñ–µ–∫—Ü—ñ–æ–Ω—ñ—Å—Ç: –¢–æ—á–Ω—ñ—Å—Ç—å ‚â•3 –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
function isQuestCompleted_Perfectionist(data) {
  const byDate = groupByDate(data);
  return Object.values(byDate).some(list => list.some(r => r.name === "üéØ–¢–æ—á–Ω—ñ—Å—Ç—å" && Number(r.level) >= 3));
}

// –í—á–∏—Ç–µ–ª—å-–Ω–∞—Ç—Ö–Ω–µ–Ω–Ω–∏–∫: —Å—É–º–∞—Ä–Ω–æ ‚â•5 —Ä—ñ–≤–Ω—ñ–≤ —É —Ç—Ä—å–æ—Ö –±–æ–Ω—É—Å–Ω–∏—Ö
function isQuestCompleted_Teacher(data) {
  const names = ["üéì–°–∞–º —Å–æ–±—ñ –≤—á–∏—Ç–µ–ª—å", "üí°–ú–∞–π—Å—Ç–µ—Ä –ø–æ—è—Å–Ω–µ–Ω—å", "üé®–ö—Ä–µ–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å"];
  let total = 0;
  data.forEach(r => {
    if (names.includes(r[1])) total += Number(r[2]);
  });
  return total >= 5;
}

// –ú–∞–π—Å—Ç–µ—Ä –∫–≤–µ—Å—Ç—ñ–≤: –≤–∏–∫–æ–Ω–∞—Ç–∏ 5 —Ä—ñ–∑–Ω–∏—Ö –∫–≤–µ—Å—Ç—ñ–≤
function isQuestCompleted_QuestMaster() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const qSheet = ss.getSheetByName('Quests_Log');
  if (!qSheet) return false;
  const data = qSheet.getDataRange().getValues();
  return data.length >= 6; // 1 —Ä—è–¥–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ + 5 –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö
}
